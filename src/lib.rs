mod config;
use std::str::Utf8Error;

pub use config::Config;

/// Errors generated by this crate.
#[derive(Debug, thiserror::Error)]
pub enum Error {
    #[error("Meson not found")]
    MesonNotFound,

    #[error("The meson returned unexpected version output: {0}")]
    MesonIncorrectVersion(#[from] semver::Error),

    #[error("Meson exited unexpectedly: {0}")]
    MesonExitedUnsuccessfully(i32),

    #[error("Meson exited with signal")]
    MesonExitedBySignal,

    #[error("Meson configure failed: {0}")]
    MesonConfiguredUnsuccessfully(i32),

    #[error("Meson build failed: {0}")]
    MesonBuildUnsuccessfully(i32),

    #[error("IO error: {0}")]
    IoError(#[from] std::io::Error),

    #[error("Utf8 error")]
    Utf8Error(#[from] Utf8Error),
}

pub type Result<T> = std::result::Result<T, Error>;

/// Finds any meson in system and returns configuration to use it for building.
///
/// # Note
/// By default, it will search for `meson` in PATH. However,
/// it can be overridden by defining `MESON` environment variable or `MESON_<TARGET_UPPER_CASE>`
/// environment variable. If both are defined, target specific one will be used.
///
/// For example, if you are building for `x86_64-unknown-linux-gnu`, it will search for
/// `MESON_X86_64_UNKNOWN_LINUX_GNU` environment variable and then `MESON` environment variable.
///
pub fn find_meson() -> Result<Config> {
    Config::find_system_meson()
}
